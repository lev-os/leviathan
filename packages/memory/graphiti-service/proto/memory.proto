syntax = "proto3";

package leviathan.memory;

// Memory service for Leviathan ecosystem using Graphiti backend
service MemoryService {
  // Connection management
  rpc Connect(ConnectRequest) returns (ConnectResponse);
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse);
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);

  // Core memory operations
  rpc CreateMemory(CreateMemoryRequest) returns (CreateMemoryResponse);
  rpc SearchMemory(SearchMemoryRequest) returns (SearchMemoryResponse);
  rpc GetMemory(GetMemoryRequest) returns (GetMemoryResponse);
  rpc UpdateMemory(UpdateMemoryRequest) returns (UpdateMemoryResponse);
  rpc DeleteMemory(DeleteMemoryRequest) returns (DeleteMemoryResponse);

  // Episodic memory (Graphiti's strength)
  rpc AddEpisode(AddEpisodeRequest) returns (AddEpisodeResponse);
  rpc GetEpisodeHistory(GetEpisodeHistoryRequest) returns (GetEpisodeHistoryResponse);
  rpc SearchEpisodes(SearchEpisodesRequest) returns (SearchEpisodesResponse);

  // Temporal reasoning
  rpc GetTemporalContext(GetTemporalContextRequest) returns (GetTemporalContextResponse);
  rpc FindPatterns(FindPatternsRequest) returns (FindPatternsResponse);

  // Multi-agent workspace management
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);
  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse);
  rpc SwitchWorkspace(SwitchWorkspaceRequest) returns (SwitchWorkspaceResponse);

  // Advanced features
  rpc HybridSearch(HybridSearchRequest) returns (HybridSearchResponse);
  rpc BuildIndices(BuildIndicesRequest) returns (BuildIndicesResponse);
  
  // Decay and learning operations
  rpc ApplyDecay(ApplyDecayRequest) returns (ApplyDecayResponse);
  rpc ReinforceMemory(ReinforceMemoryRequest) returns (ReinforceMemoryResponse);
  rpc DetectAhaMoment(DetectAhaMomentRequest) returns (DetectAhaMomentResponse);
  rpc PropagateInsight(PropagateInsightRequest) returns (PropagateInsightResponse);
  rpc GetDecayStats(GetDecayStatsRequest) returns (GetDecayStatsResponse);
}

// Connection messages
message ConnectRequest {
  string neo4j_uri = 1;
  string username = 2;
  string password = 3;
  map<string, string> options = 4;
}

message ConnectResponse {
  bool success = 1;
  string message = 2;
  string session_id = 3;
}

message DisconnectRequest {
  string session_id = 1;
}

message DisconnectResponse {
  bool success = 1;
  string message = 2;
}

message HealthCheckRequest {}

message HealthCheckResponse {
  bool healthy = 1;
  string status = 2;
  map<string, string> details = 3;
}

// Memory objects
message Memory {
  string id = 1;
  string content = 2;
  string type = 3;
  int64 timestamp = 4;
  map<string, string> metadata = 5;
  repeated float embedding = 6;
  string workspace_id = 7;
  
  // Decay and learning fields
  float confidence = 8;
  int64 last_accessed_at = 9;
  int32 access_count = 10;
  int64 last_decayed_at = 11;
  float importance_score = 12;
  int32 transformation_count = 13;
  repeated string reinforcement_history = 14;
}

message Episode {
  string id = 1;
  string name = 2;
  string content = 3;
  int64 reference_time = 4;
  string workspace_id = 5;
  map<string, string> metadata = 6;
  repeated Relationship relationships = 7;
}

message Relationship {
  string from_id = 1;
  string to_id = 2;
  string type = 3;
  float strength = 4;
  map<string, string> properties = 5;
}

message Pattern {
  string type = 1;
  float confidence = 2;
  repeated string evidence = 3;
  int32 frequency = 4;
  int64 first_seen = 5;
  int64 last_seen = 6;
  map<string, string> metadata = 7;
}

// Core memory operations
message CreateMemoryRequest {
  string content = 1;
  string type = 2;
  map<string, string> metadata = 3;
  string workspace_id = 4;
}

message CreateMemoryResponse {
  bool success = 1;
  Memory memory = 2;
  string error = 3;
}

message SearchMemoryRequest {
  string query = 1;
  int32 limit = 2;
  repeated string types = 3;
  string workspace_id = 4;
  map<string, string> filters = 5;
}

message SearchMemoryResponse {
  bool success = 1;
  repeated Memory memories = 2;
  string error = 3;
}

message GetMemoryRequest {
  string id = 1;
  string workspace_id = 2;
}

message GetMemoryResponse {
  bool success = 1;
  Memory memory = 2;
  string error = 3;
}

message UpdateMemoryRequest {
  string id = 1;
  string content = 2;
  map<string, string> metadata = 3;
  string workspace_id = 4;
}

message UpdateMemoryResponse {
  bool success = 1;
  Memory memory = 2;
  string error = 3;
}

message DeleteMemoryRequest {
  string id = 1;
  string workspace_id = 2;
}

message DeleteMemoryResponse {
  bool success = 1;
  string message = 2;
  string error = 3;
}

// Episodic memory operations
message AddEpisodeRequest {
  string name = 1;
  string content = 2;
  int64 reference_time = 3;
  string workspace_id = 4;
  map<string, string> metadata = 5;
}

message AddEpisodeResponse {
  bool success = 1;
  Episode episode = 2;
  string error = 3;
}

message GetEpisodeHistoryRequest {
  string workspace_id = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  int32 limit = 4;
}

message GetEpisodeHistoryResponse {
  bool success = 1;
  repeated Episode episodes = 2;
  string error = 3;
}

message SearchEpisodesRequest {
  string query = 1;
  string workspace_id = 2;
  int32 limit = 3;
  map<string, string> filters = 4;
}

message SearchEpisodesResponse {
  bool success = 1;
  repeated Episode episodes = 2;
  string error = 3;
}

// Temporal reasoning
message GetTemporalContextRequest {
  string situation = 1;
  string workspace_id = 2;
  bool include_related = 3;
  int32 limit = 4;
}

message GetTemporalContextResponse {
  bool success = 1;
  repeated Episode episodes = 2;
  repeated Relationship relationships = 3;
  string error = 4;
}

message FindPatternsRequest {
  string context_type = 1;
  string workspace_id = 2;
  int32 min_frequency = 3;
  float min_confidence = 4;
}

message FindPatternsResponse {
  bool success = 1;
  repeated Pattern patterns = 2;
  string error = 3;
}

// Workspace management
message CreateWorkspaceRequest {
  string workspace_id = 1;
  string description = 2;
  map<string, string> config = 3;
}

message CreateWorkspaceResponse {
  bool success = 1;
  string workspace_id = 2;
  string error = 3;
}

message ListWorkspacesRequest {}

message ListWorkspacesResponse {
  bool success = 1;
  repeated string workspace_ids = 2;
  map<string, string> descriptions = 3;
  string error = 4;
}

message SwitchWorkspaceRequest {
  string workspace_id = 1;
}

message SwitchWorkspaceResponse {
  bool success = 1;
  string previous_workspace = 2;
  string current_workspace = 3;
  string error = 4;
}

// Advanced operations
message HybridSearchRequest {
  string query = 1;
  string workspace_id = 2;
  bool include_relationships = 3;
  bool include_temporal = 4;
  int32 limit = 5;
  map<string, string> options = 6;
}

message HybridSearchResponse {
  bool success = 1;
  repeated Memory memories = 2;
  repeated Episode episodes = 3;
  repeated Relationship relationships = 4;
  string error = 5;
}

message BuildIndicesRequest {
  string workspace_id = 1;
  bool force_rebuild = 2;
}

message BuildIndicesResponse {
  bool success = 1;
  string message = 2;
  map<string, int32> index_counts = 3;
  string error = 4;
}

// Decay and learning messages
message ApplyDecayRequest {
  string workspace_id = 1;
  repeated string memory_ids = 2; // Optional: specific memories to decay
  float prune_threshold = 3; // Optional: mark for pruning below this confidence
}

message ApplyDecayResponse {
  bool success = 1;
  int32 memories_decayed = 2;
  int32 memories_pruned = 3;
  string error = 4;
}

message ReinforceMemoryRequest {
  string memory_id = 1;
  string workspace_id = 2;
  float usage_strength = 3; // 0-1 strength of reinforcement
}

message ReinforceMemoryResponse {
  bool success = 1;
  Memory memory = 2;
  float previous_confidence = 3;
  string error = 4;
}

message AhaMoment {
  string id = 1;
  string type = 2;
  int64 timestamp = 3;
  string context_id = 4;
  float significance = 5;
  string insight = 6;
  repeated string affected_contexts = 7;
  repeated string bubble_up_to = 8;
}

message DetectAhaMomentRequest {
  string observation = 1;
  string context_id = 2;
  string workspace_id = 3;
  map<string, string> observation_metadata = 4;
}

message DetectAhaMomentResponse {
  bool success = 1;
  bool aha_moment_detected = 2;
  AhaMoment aha_moment = 3;
  string error = 4;
}

message PropagateInsightRequest {
  AhaMoment insight = 1;
  string workspace_id = 2;
}

message PropagateInsightResponse {
  bool success = 1;
  repeated string bubbled_up = 2;
  repeated string trickled_down = 3;
  repeated string errors = 4;
}

message GetDecayStatsRequest {
  string workspace_id = 1;
}

message GetDecayStatsResponse {
  bool success = 1;
  float temporal_decay_rate = 2;
  int32 memories_tracked = 3;
  bool scheduler_active = 4;
  int64 last_decay_run = 5;
  map<string, float> workspace_stats = 6;
  string error = 7;
}