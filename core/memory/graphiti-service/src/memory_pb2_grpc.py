# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import memory_pb2 as memory__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in memory_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MemoryServiceStub(object):
    """Memory service for Leviathan ecosystem using Graphiti backend
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/leviathan.memory.MemoryService/Connect',
                request_serializer=memory__pb2.ConnectRequest.SerializeToString,
                response_deserializer=memory__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Disconnect = channel.unary_unary(
                '/leviathan.memory.MemoryService/Disconnect',
                request_serializer=memory__pb2.DisconnectRequest.SerializeToString,
                response_deserializer=memory__pb2.DisconnectResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/leviathan.memory.MemoryService/HealthCheck',
                request_serializer=memory__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=memory__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.CreateMemory = channel.unary_unary(
                '/leviathan.memory.MemoryService/CreateMemory',
                request_serializer=memory__pb2.CreateMemoryRequest.SerializeToString,
                response_deserializer=memory__pb2.CreateMemoryResponse.FromString,
                _registered_method=True)
        self.SearchMemory = channel.unary_unary(
                '/leviathan.memory.MemoryService/SearchMemory',
                request_serializer=memory__pb2.SearchMemoryRequest.SerializeToString,
                response_deserializer=memory__pb2.SearchMemoryResponse.FromString,
                _registered_method=True)
        self.GetMemory = channel.unary_unary(
                '/leviathan.memory.MemoryService/GetMemory',
                request_serializer=memory__pb2.GetMemoryRequest.SerializeToString,
                response_deserializer=memory__pb2.GetMemoryResponse.FromString,
                _registered_method=True)
        self.UpdateMemory = channel.unary_unary(
                '/leviathan.memory.MemoryService/UpdateMemory',
                request_serializer=memory__pb2.UpdateMemoryRequest.SerializeToString,
                response_deserializer=memory__pb2.UpdateMemoryResponse.FromString,
                _registered_method=True)
        self.DeleteMemory = channel.unary_unary(
                '/leviathan.memory.MemoryService/DeleteMemory',
                request_serializer=memory__pb2.DeleteMemoryRequest.SerializeToString,
                response_deserializer=memory__pb2.DeleteMemoryResponse.FromString,
                _registered_method=True)
        self.AddEpisode = channel.unary_unary(
                '/leviathan.memory.MemoryService/AddEpisode',
                request_serializer=memory__pb2.AddEpisodeRequest.SerializeToString,
                response_deserializer=memory__pb2.AddEpisodeResponse.FromString,
                _registered_method=True)
        self.GetEpisodeHistory = channel.unary_unary(
                '/leviathan.memory.MemoryService/GetEpisodeHistory',
                request_serializer=memory__pb2.GetEpisodeHistoryRequest.SerializeToString,
                response_deserializer=memory__pb2.GetEpisodeHistoryResponse.FromString,
                _registered_method=True)
        self.SearchEpisodes = channel.unary_unary(
                '/leviathan.memory.MemoryService/SearchEpisodes',
                request_serializer=memory__pb2.SearchEpisodesRequest.SerializeToString,
                response_deserializer=memory__pb2.SearchEpisodesResponse.FromString,
                _registered_method=True)
        self.GetTemporalContext = channel.unary_unary(
                '/leviathan.memory.MemoryService/GetTemporalContext',
                request_serializer=memory__pb2.GetTemporalContextRequest.SerializeToString,
                response_deserializer=memory__pb2.GetTemporalContextResponse.FromString,
                _registered_method=True)
        self.FindPatterns = channel.unary_unary(
                '/leviathan.memory.MemoryService/FindPatterns',
                request_serializer=memory__pb2.FindPatternsRequest.SerializeToString,
                response_deserializer=memory__pb2.FindPatternsResponse.FromString,
                _registered_method=True)
        self.CreateWorkspace = channel.unary_unary(
                '/leviathan.memory.MemoryService/CreateWorkspace',
                request_serializer=memory__pb2.CreateWorkspaceRequest.SerializeToString,
                response_deserializer=memory__pb2.CreateWorkspaceResponse.FromString,
                _registered_method=True)
        self.ListWorkspaces = channel.unary_unary(
                '/leviathan.memory.MemoryService/ListWorkspaces',
                request_serializer=memory__pb2.ListWorkspacesRequest.SerializeToString,
                response_deserializer=memory__pb2.ListWorkspacesResponse.FromString,
                _registered_method=True)
        self.SwitchWorkspace = channel.unary_unary(
                '/leviathan.memory.MemoryService/SwitchWorkspace',
                request_serializer=memory__pb2.SwitchWorkspaceRequest.SerializeToString,
                response_deserializer=memory__pb2.SwitchWorkspaceResponse.FromString,
                _registered_method=True)
        self.HybridSearch = channel.unary_unary(
                '/leviathan.memory.MemoryService/HybridSearch',
                request_serializer=memory__pb2.HybridSearchRequest.SerializeToString,
                response_deserializer=memory__pb2.HybridSearchResponse.FromString,
                _registered_method=True)
        self.BuildIndices = channel.unary_unary(
                '/leviathan.memory.MemoryService/BuildIndices',
                request_serializer=memory__pb2.BuildIndicesRequest.SerializeToString,
                response_deserializer=memory__pb2.BuildIndicesResponse.FromString,
                _registered_method=True)


class MemoryServiceServicer(object):
    """Memory service for Leviathan ecosystem using Graphiti backend
    """

    def Connect(self, request, context):
        """Connection management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disconnect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMemory(self, request, context):
        """Core memory operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchMemory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMemory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMemory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMemory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEpisode(self, request, context):
        """Episodic memory (Graphiti's strength)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEpisodeHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchEpisodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTemporalContext(self, request, context):
        """Temporal reasoning
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindPatterns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkspace(self, request, context):
        """Multi-agent workspace management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkspaces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwitchWorkspace(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HybridSearch(self, request, context):
        """Advanced features
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuildIndices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MemoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=memory__pb2.ConnectRequest.FromString,
                    response_serializer=memory__pb2.ConnectResponse.SerializeToString,
            ),
            'Disconnect': grpc.unary_unary_rpc_method_handler(
                    servicer.Disconnect,
                    request_deserializer=memory__pb2.DisconnectRequest.FromString,
                    response_serializer=memory__pb2.DisconnectResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=memory__pb2.HealthCheckRequest.FromString,
                    response_serializer=memory__pb2.HealthCheckResponse.SerializeToString,
            ),
            'CreateMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMemory,
                    request_deserializer=memory__pb2.CreateMemoryRequest.FromString,
                    response_serializer=memory__pb2.CreateMemoryResponse.SerializeToString,
            ),
            'SearchMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchMemory,
                    request_deserializer=memory__pb2.SearchMemoryRequest.FromString,
                    response_serializer=memory__pb2.SearchMemoryResponse.SerializeToString,
            ),
            'GetMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMemory,
                    request_deserializer=memory__pb2.GetMemoryRequest.FromString,
                    response_serializer=memory__pb2.GetMemoryResponse.SerializeToString,
            ),
            'UpdateMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMemory,
                    request_deserializer=memory__pb2.UpdateMemoryRequest.FromString,
                    response_serializer=memory__pb2.UpdateMemoryResponse.SerializeToString,
            ),
            'DeleteMemory': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMemory,
                    request_deserializer=memory__pb2.DeleteMemoryRequest.FromString,
                    response_serializer=memory__pb2.DeleteMemoryResponse.SerializeToString,
            ),
            'AddEpisode': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEpisode,
                    request_deserializer=memory__pb2.AddEpisodeRequest.FromString,
                    response_serializer=memory__pb2.AddEpisodeResponse.SerializeToString,
            ),
            'GetEpisodeHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEpisodeHistory,
                    request_deserializer=memory__pb2.GetEpisodeHistoryRequest.FromString,
                    response_serializer=memory__pb2.GetEpisodeHistoryResponse.SerializeToString,
            ),
            'SearchEpisodes': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchEpisodes,
                    request_deserializer=memory__pb2.SearchEpisodesRequest.FromString,
                    response_serializer=memory__pb2.SearchEpisodesResponse.SerializeToString,
            ),
            'GetTemporalContext': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTemporalContext,
                    request_deserializer=memory__pb2.GetTemporalContextRequest.FromString,
                    response_serializer=memory__pb2.GetTemporalContextResponse.SerializeToString,
            ),
            'FindPatterns': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPatterns,
                    request_deserializer=memory__pb2.FindPatternsRequest.FromString,
                    response_serializer=memory__pb2.FindPatternsResponse.SerializeToString,
            ),
            'CreateWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkspace,
                    request_deserializer=memory__pb2.CreateWorkspaceRequest.FromString,
                    response_serializer=memory__pb2.CreateWorkspaceResponse.SerializeToString,
            ),
            'ListWorkspaces': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkspaces,
                    request_deserializer=memory__pb2.ListWorkspacesRequest.FromString,
                    response_serializer=memory__pb2.ListWorkspacesResponse.SerializeToString,
            ),
            'SwitchWorkspace': grpc.unary_unary_rpc_method_handler(
                    servicer.SwitchWorkspace,
                    request_deserializer=memory__pb2.SwitchWorkspaceRequest.FromString,
                    response_serializer=memory__pb2.SwitchWorkspaceResponse.SerializeToString,
            ),
            'HybridSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.HybridSearch,
                    request_deserializer=memory__pb2.HybridSearchRequest.FromString,
                    response_serializer=memory__pb2.HybridSearchResponse.SerializeToString,
            ),
            'BuildIndices': grpc.unary_unary_rpc_method_handler(
                    servicer.BuildIndices,
                    request_deserializer=memory__pb2.BuildIndicesRequest.FromString,
                    response_serializer=memory__pb2.BuildIndicesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'leviathan.memory.MemoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('leviathan.memory.MemoryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MemoryService(object):
    """Memory service for Leviathan ecosystem using Graphiti backend
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/Connect',
            memory__pb2.ConnectRequest.SerializeToString,
            memory__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disconnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/Disconnect',
            memory__pb2.DisconnectRequest.SerializeToString,
            memory__pb2.DisconnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/HealthCheck',
            memory__pb2.HealthCheckRequest.SerializeToString,
            memory__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/CreateMemory',
            memory__pb2.CreateMemoryRequest.SerializeToString,
            memory__pb2.CreateMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/SearchMemory',
            memory__pb2.SearchMemoryRequest.SerializeToString,
            memory__pb2.SearchMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/GetMemory',
            memory__pb2.GetMemoryRequest.SerializeToString,
            memory__pb2.GetMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/UpdateMemory',
            memory__pb2.UpdateMemoryRequest.SerializeToString,
            memory__pb2.UpdateMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMemory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/DeleteMemory',
            memory__pb2.DeleteMemoryRequest.SerializeToString,
            memory__pb2.DeleteMemoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddEpisode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/AddEpisode',
            memory__pb2.AddEpisodeRequest.SerializeToString,
            memory__pb2.AddEpisodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetEpisodeHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/GetEpisodeHistory',
            memory__pb2.GetEpisodeHistoryRequest.SerializeToString,
            memory__pb2.GetEpisodeHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchEpisodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/SearchEpisodes',
            memory__pb2.SearchEpisodesRequest.SerializeToString,
            memory__pb2.SearchEpisodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTemporalContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/GetTemporalContext',
            memory__pb2.GetTemporalContextRequest.SerializeToString,
            memory__pb2.GetTemporalContextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindPatterns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/FindPatterns',
            memory__pb2.FindPatternsRequest.SerializeToString,
            memory__pb2.FindPatternsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/CreateWorkspace',
            memory__pb2.CreateWorkspaceRequest.SerializeToString,
            memory__pb2.CreateWorkspaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkspaces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/ListWorkspaces',
            memory__pb2.ListWorkspacesRequest.SerializeToString,
            memory__pb2.ListWorkspacesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SwitchWorkspace(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/SwitchWorkspace',
            memory__pb2.SwitchWorkspaceRequest.SerializeToString,
            memory__pb2.SwitchWorkspaceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HybridSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/HybridSearch',
            memory__pb2.HybridSearchRequest.SerializeToString,
            memory__pb2.HybridSearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BuildIndices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/leviathan.memory.MemoryService/BuildIndices',
            memory__pb2.BuildIndicesRequest.SerializeToString,
            memory__pb2.BuildIndicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
