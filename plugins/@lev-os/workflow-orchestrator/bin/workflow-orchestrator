#!/usr/bin/env node

/**
 * Workflow Orchestrator CLI Entry Point
 * 
 * Provides command-line interface for bi-directional workflow orchestration
 */

import { program } from 'commander';
import { WorkflowCLI } from '../src/adapters/cli/workflow-cli.js';

const cli = new WorkflowCLI();

program
  .name('workflow-orchestrator')
  .description('Bi-directional workflow orchestration CLI')
  .version('1.0.0');

// Execute workflow command
program
  .command('execute <workflow>')
  .description('Execute a workflow')
  .option('-i, --input <input>', 'Input data (JSON, file path, or key=value pairs)')
  .option('-o, --output <dir>', 'Output directory for results')
  .option('--interactive', 'Interactive execution with step-by-step feedback')
  .option('--parallel', 'Enable parallel execution where possible')
  .option('-v, --verbose', 'Verbose output')
  .action(async (workflow, options) => {
    try {
      await cli.execute({
        workflow,
        input: options.input,
        output: options.output,
        interactive: options.interactive,
        parallel: options.parallel,
        verbose: options.verbose
      });
    } catch (error) {
      console.error('❌ Execution failed:', error.message);
      process.exit(1);
    }
  });

// List workflows command
program
  .command('list')
  .description('List available workflows')
  .option('-t, --type <type>', 'Filter by workflow type')
  .option('-c, --category <category>', 'Filter by category')
  .option('-v, --verbose', 'Show detailed information')
  .action(async (options) => {
    try {
      await cli.list({
        type: options.type,
        category: options.category,
        verbose: options.verbose
      });
    } catch (error) {
      console.error('❌ List failed:', error.message);
      process.exit(1);
    }
  });

// Show workflow info command
program
  .command('info <workflow>')
  .description('Show detailed information about a workflow')
  .action(async (workflow) => {
    try {
      await cli.info(workflow);
    } catch (error) {
      console.error('❌ Info failed:', error.message);
      process.exit(1);
    }
  });

// Interactive mode command
program
  .command('interactive <workflow>')
  .alias('i')
  .description('Run workflow in interactive mode')
  .action(async (workflow) => {
    try {
      await cli.interactive(workflow);
    } catch (error) {
      console.error('❌ Interactive mode failed:', error.message);
      process.exit(1);
    }
  });

// Parse and execute
program.parse();