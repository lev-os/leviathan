metadata:
  id: bdd-specification  
  type: workflow
  name: BDD Specification from ADRs
  version: 0.1.0
  description: Transform architectural decisions into behavior-driven development specifications
  category: implementation-planning
  tags:
    - bdd
    - specification
    - testing
    - implementation

workflow_config:
  triggers:
    manual:
      - adr_accepted
      - spec_needed
    semantic:
      - condition: "ADR ready for implementation"
        confidence: 0.85
      - condition: "need concrete specs from decision"
        confidence: 0.8
        
  steps:
    - step: 1
      name: ADR Decomposition
      personality: doc-shepherd
      focus: "Break down ADR into features"
      prompt: |
        Decompose ADR into implementable features:
        
        1. **Feature Identification**
           - What distinct features does this ADR imply?
           - Should this be one spec or multiple?
           - What are the natural boundaries?
           
        2. **Dependency Mapping**
           - What must be built first?
           - What can be built in parallel?
           - External dependencies?
           
        3. **Scope Definition**
           - What's in scope for each feature?
           - What's explicitly out of scope?
           - MVP vs full implementation?
           
        Create feature breakdown structure.
        
    - step: 2
      name: Acceptance Criteria Definition
      personality: stj-leader
      focus: "Clear success metrics"
      prompt: |
        Define acceptance criteria for each feature:
        
        1. **Functional Criteria**
           - What must the feature do?
           - Specific, measurable outcomes
           - User-facing behavior
           
        2. **Non-Functional Criteria**
           - Performance requirements
           - Security constraints
           - Scalability needs
           
        3. **Integration Criteria**
           - How it fits with existing system
           - API contracts
           - Data flow requirements
           
        Generate numbered, testable criteria.
        
    - step: 3
      name: Scenario Development
      personality: stp-adapter
      focus: "Concrete BDD scenarios"
      prompt: |
        Create BDD scenarios for each criterion:
        
        1. **Happy Path Scenarios**
           ```gherkin
           Given [initial context]
           When [user/system action]
           Then [expected outcome]
           ```
           
        2. **Edge Cases**
           - Boundary conditions
           - Error scenarios
           - Concurrent operations
           
        3. **Integration Scenarios**
           - Multi-component interactions
           - State transitions
           - Event flows
           
        Write complete Gherkin scenarios.
        
    - step: 4
      name: Test Strategy Design
      personality: nfj-visionary
      focus: "Holistic test approach"
      prompt: |
        Design comprehensive test strategy:
        
        1. **Test Architecture**
           - Unit test structure
           - Integration test approach
           - E2E test scenarios
           
        2. **Test Data Strategy**
           - Fixtures needed
           - Mock requirements
           - Test environment setup
           
        3. **Coverage Strategy**
           - Critical paths
           - Risk-based testing
           - Performance benchmarks
           
        Map BDD to TDD implementation.
        
    - step: 5
      name: Implementation Guidance
      personality: nfp-advocate
      focus: "Developer experience"
      prompt: |
        Create developer-friendly implementation guide:
        
        1. **Quick Start**
           - Where to begin
           - Code structure
           - Key interfaces
           
        2. **Pattern Examples**
           - Code snippets
           - Best practices
           - Anti-patterns to avoid
           
        3. **Collaboration Points**
           - Where to ask questions
           - Review checkpoints
           - Integration milestones
           
        Make implementation approachable.
        
    - step: 6
      name: Spec Compilation
      personality: doc-shepherd
      focus: "Final specification document"
      prompt: |
        Compile comprehensive BDD specification:
        
        ```markdown
        # Spec: [Feature Name]
        
        **ADR Reference**: ADR-XXX
        **Priority**: High/Medium/Low
        **Estimated Effort**: S/M/L/XL
        
        ## Overview
        [Brief description and context]
        
        ## Acceptance Criteria
        - [ ] AC1: [Specific measurable outcome]
        - [ ] AC2: [Another measurable outcome]
        ...
        
        ## BDD Scenarios
        
        ### Feature: [Feature Name]
        
        #### Scenario: [Scenario 1 Name]
        Given [initial context]
        When [action taken]
        Then [expected outcome]
        
        #### Scenario: [Scenario 2 Name]
        ...
        
        ## Implementation Notes
        - Key interfaces: [list]
        - Dependencies: [list]
        - Gotchas: [warnings]
        
        ## Test Strategy
        - Unit tests: [approach]
        - Integration tests: [approach]
        - Test data: [requirements]
        
        ## Definition of Done
        - [ ] All AC met
        - [ ] All scenarios passing
        - [ ] Code reviewed
        - [ ] Documentation updated
        - [ ] Performance validated
        ```
        
        Generate ready-to-implement specification.

  output_format:
    type: bdd_specification
    includes:
      - feature_specs
      - test_scenarios
      - implementation_guide
      - validation_checklist
      
  validation:
    spec_completeness:
      - all_ac_testable
      - scenarios_cover_ac
      - clear_implementation_path
      - test_strategy_defined
      - done_criteria_explicit